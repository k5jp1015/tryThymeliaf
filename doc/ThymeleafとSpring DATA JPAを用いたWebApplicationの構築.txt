■単語帳替わり
	C:/Users/k.magami/Documents/Project\ Spring\ Boot/workspace/WithThymeleaf

■Thymeleafを用いたWebApplicationの構築

	参考サイト：http://qiita.com/opengl-8080/items/05d9490d6f0544e2351a#hello-world-1
	Thymeleaf：テンプレートエンジンの一種。これにより、クライアント側
	
	
	 @RequestMapping(method=RequestMethod.GET)でHTTPメソッドのGETを利用することができる
	 →POSTやPUTのときはどうするかは要確認
	 
	 Spring Initilizerで作成したZipではたまにjarファイルの読み込みがうまくいかないケースがあるっぽい。
	 その場合、うまく読み込めていないjarが入っているディレクトリごと物理削除し、mavenでプロジェクトの更新
	 をしてあげると、再度jarを配置することによって解決する
	 
	 
	・Web API のエントリポイントとなるクラスを作る場合は、 @RestController でクラスをアノテートする。
	・↑対してテンプレートを返す場合は、@RestController ではなく @Controller でクラスをアノテートする。
	・Web API ではなく、 MVC の C となるコントローラにしたい場合は @Controller でアノテートする（詳細後述）。
	・@RequestMapping で、パスや HTTP メソッドのマッピングをする（だいたい JAX-RS と同じノリ）。
	・サーバーのポート番号を変更することも可能。「application.properties」に「server.port=1598」のように記述し、再度Mavenプロジェクトを読み込む。
	・
	
■tryThymeleafプロジェクト

	・以下のURLを用いている
	http://qiita.com/opengl-8080/items/05d9490d6f0544e2351a#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B
	
	th:each で、指定したコレクションを繰り返し処理できる。
	
	
■MySQLとのコネクションと利用

	・以下の情報をapplication.ymlに記述する
	ポート:3306
	rootユーザのパスワード:aim共通いつものpから始まるやつ
	ユーザー：aimuser
	パスワード：aim共通いつものpから始まるやつ
	↑ユーザー:k.magami パスワード:いつもの下7桁verも作成
	
	
	参考：URL「http://www.riem.nagoya-u.ac.jp/~ohta/etc/springboot-3-mysql.html」
	
	・↓application.ymlへの実際の記述
	
	1:spring.datasource.url=jdbc:mysql://localhost/springbootsample
	2:spring.datasource.username=ohta
	3:spring.datasource.password=ほにゃらら　←パスワード
	4:spring.datasource.driverClassName=com.mysql.jdbc.Driver
	5:spring.jpa.hibernate.ddl-auto=update
	
	5行目のパラメータは，hibernateに対するパラメータです。
	update　→　テーブルがなければ新規につくる。
	　　　　　　テーブルが既存で，マッピング情報が同じであれば，そのまま使用する。
	　　　　　　現在のテーブルマッピングが変更されていれば，その現状に合わせてテーブル構成をアップデートする。
	create　→　既にテーブルがあっても，"次の起動時に" 破棄して新規につくって稼動する。
	　　　　　　次回の起動時までデータは残っているが，アプリを稼動させたタイミングで既存テーブルデータが捨てられる。
	create-drop　→　セッションが終わると即，既存テーブルデータを破棄する。（つまりアプリを落とした段階で破棄される）
	validate　→ 　バリデートするだけで，今のテーブル構成を変更しない。
	あと， none というのもあるみたい． 何もしない模様（未検証）。

	開発中はupdateで，一度テーブルデータをばっさり捨てたいときは一時的にcreateかcreate-dropにして，
	運用に入ったら，noneというのが安全？（このあたりはよく考えて，ご自由に設定ください :-)）
	
■Spring BootでのDBコネクションの構築について
	●spring data jpaにおけるCRUD実装の考え方
	・jpaを構成する3つの要素←spring data jpa以前のjpaの考え方における整理のために
		エンティティ
			→データベースに保管するオブジェクト、データベース、レコードに相当するオブジェクト。
			エンティティクラスとして個別に作る。
		エンティティ・マネージャー
			→エンティティを管理するためのオブジェクト。
			JPA永続性プロバイダを使用するアプリケーションにおいて、すべての永続処理（作成、読込み、更新、および削除）はEntityManagerインスタンスを使用して実行します
		永続的コンテキスト
			→EntityManagerの配下にあり、エンティティの状態を表すオブジェクト。DBと橋渡し用キャッシュと考えるとよし
			
	・Spring DATA JPAにおけるRepositoryの考え方
		Spring DATA JPAは、JPAの機能をベースに 汎用的な Repositoryの機能を提供する。
		ちなみに、Repositoryというのは、ドメイン駆動設計（Domain Driven Design)のパターンのひとつで、ドメインのEntityのCollectionのように振舞う責務を持つ。
		例えば CustomerRepositoryならば、システムに存在するCustomer EntityたちをCollectionに保持するかのように振舞う。
		JpaRepository、もしくはcrudRepositoryを拡張した interface を定義し,クライアント側で @Autowired アノテーションを定義し、repositoryプロパティにInjectする
		repositoryはDBとEntity、もしくはエンティティのリストとの橋渡しのイメージで利用される
		repository（ 拡張されたインターフェースを@Autowiredを用いて定義したもの）は「findBy○○（○○はエンティティに定義されている要素）」や「findBy○○And××（略）」の様に
		検索メソッドを持つ
		
	・各種CRUDイベント作成の流れ
		・大まかに流れ
			1.画面の作成
			2.エンティティの作成
			3.repositoryを拡張したインターフェースの作成
			4.コントローラークラスの作成
		
		1.画面の作成
			・Thymeleafを用いた形で、DBの値が出力されるように「<p th:text="${resultsDesired}" />」のように記述設定をする
		2.エンティティの作成
			・エンティティを作成する。UPDATE処理を用いるときはsetterは必須
		3.repositoryを拡張したインターフェースの作成
			・JpaRepositoryを拡張したインターフェースを実装する。必要に応じて、検索メソッドを定義する。検索メソッドを定義することでDBから特定のレコードを抽出することができる
		4.コントローラークラスの作成
			・@RequestMapping("/〜〜",method = RequestMethod.POST or GET)を用いてイベントを設定する。
			・画面遷移でも、formを用いたボタン遷移等でもよい。画面側の値を一つでも利用する場合はPOSTでを用いる
			・DBからの取得・検索：画面から値と「拡張したrepositoryインターフェース」.「検索メソッド」を利用。
				Iterable<Person> list = repository.findAll();　list = repositoryDesired.findById(Id);
			・DBへの入力・更新
				「拡張したrepositoryインターフェース」.「save系メソッド」を利用。引数はエンティティでもエンティティ型リストでも可
					repositoryDesired.saveAndFlush(list);
			・画面への出力
				model.addAttributeを用いて、画面側の指定された箇所にDBからの値や特定の文字列等を入れる
				mode.addAttribute系はThymeleafで指定しているものなのかよくわかっていないので要確認
		参考URL
		http://qiita.com/uzresk/items/31a4585f7828c4a9334f#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%B8%E3%81%AEcrud
		https://gist.github.com/ryo-murai/3741340


	



	・基本的には「Spring Data JPA」というものをもちいている（らしい・・・）
	・CRUD操作の基本はJPAをもとにしている
	・参考：URL「https://gist.github.com/ryo-murai/3741340」
	・JpaRepositoryを拡張した interface を定義する。それだけでRepository完成。実装クラスは無しでもOK。JpaRepository の型引数には、Entityクラスの型とその@Idの型を指定する。
	・↑interfaceは今回でいう「DesiredRepository」とに該当する
	・「Iterable<DesiredThing> list = repositoryDesired.findAll();」は「型引数[DesiredThing]であるIterable型変数listにすべてのレコードをもつ」というものだが、
		.findAll()がSpring Data JPAのメソッドである
		
		javaのインターフェース
			public interface Iterable<T>
			このインタフェースを実装すると、オブジェクトを「foreach」文の対象にすることができます。
			
	・Hibernate
		javaでO/Rマッピングを実現させるためのツール。
		O/R マッピングツールは、 オブジェクト指向とリレーショナルデータベースの溝を埋めることを目的としています。
		
		
		
	2つのメソッドが追加されます。命名規則があります。
	
	・CustomerRepository
	参照URL「http://blog.nnasaki.com/entry/spring4/3」
	findByEmailAddress() のように findBy? に検索したいカラムの名前を入れます。
	findByAddresses_City() のように関連性のあるテーブルの列を検索して結果を取得したいときは findBy[他エンティティ名]_[カラム名]で作成します。アンダースコア(_)は省略可能です。複数の結果を返すのでList<>にしています。
	この命名規則から外れるとSpring起動時にエラーが出て立ち上がらなくなるので注意してください。
		